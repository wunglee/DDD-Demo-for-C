#include "gtest/gtest.h"
#include "事件总线测试环境.h"
#include "../../src/资金帐户BC/从适配器/资金帐户DAO.h"
#include "../../src/用户BC/从适配器/用户DAO.h"
#include "../../src/框架组件/请求拦截/请求接收器.h"
#include "请求总线测试环境1.h"
#include "请求总线测试环境2.h"

TEST(服务注册与发现,注册与查找服务){
    命名服务管理器::获取单例()->注册服务("事件监听器模拟", (事件监听器 *) new 事件监听器模拟());
    boost::optional<事件监听器*> 事件监听器_= 命名服务管理器::获取单例()->查找服务<事件监听器 *>("事件监听器模拟");
    ASSERT_EQ(事件监听器_.has_value(),true);
    delete 命名服务管理器::获取单例()->注销服务<事件监听器 *>("事件监听器模拟").value();
    命名服务管理器::销毁单例();
}

TEST_F(事件总线测试环境,测试){
    事件发布订阅服务::构建单例()->发布(领域事件("转账已创建", 0, ""));
    事件监听器* 事件监听器_= 命名服务管理器::获取单例()->查找服务<事件监听器 *>("事件监听器模拟").value();
    事件监听器模拟 *事件监听器模拟_ =dynamic_cast<事件监听器模拟*>(事件监听器_);
    ASSERT_EQ(事件监听器模拟_->获取处理结果(), true);
}
void 测试提交请求(){
    bool 回调成功=false;
    std::function<void(处理结果&)> 回调函数=[&](处理结果& 处理结果_) mutable{
        if(处理结果_.异常_==nullptr){
            回调成功=true;
        }
    };
    请求 请求_(
            "1",
           "模拟处理器",
           "方法名",
           boost::any("参数"),
            回调函数,
            {"拦截1","拦截2"});
    请求接收器::获取单例()->提交请求(请求_);
    ASSERT_EQ(回调成功, true);
}
TEST_F(请求总线测试环境1, 提交请求){
    测试提交请求();
}
TEST_F(请求总线测试环境2, 拦截请求){
    测试提交请求();
    ASSERT_EQ(请求拦截器模拟1_->执行前调用, true);
    ASSERT_EQ(请求拦截器模拟1_->执行后调用, true);
    ASSERT_EQ(请求拦截器模拟2_->执行前调用, true);
    ASSERT_EQ(请求拦截器模拟2_->执行后调用, true);
}
