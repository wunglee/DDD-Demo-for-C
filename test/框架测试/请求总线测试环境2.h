#ifndef TRANSFER_请求总线测试环境2_H
#define TRANSFER_请求总线测试环境2_H
#include "gtest/gtest.h"
#include "../../src/框架组件/请求拦截/请求接收器.h"
#include "../../src/框架组件/请求拦截/请求队列池接口.h"
#include "../../src/框架组件/请求拦截/请求队列池.h"
#include "../../src/框架组件/命名服务/命名服务管理器.h"
#include "模拟处理器.h"
#include "请求拦截器模拟1.h"
#include "请求拦截器模拟2.h"
class 请求总线测试环境2: public ::testing::Test {
public:
    请求处理器 * 模拟处理器_= nullptr;
    请求拦截器模拟1 * 请求拦截器模拟1_= nullptr;
    请求拦截器模拟2 * 请求拦截器模拟2_= nullptr;
    std::list<请求拦截器*> 请求拦截器列表;
    virtual void SetUp() {
        命名服务管理器::获取单例()->注册服务<请求队列池接口 *>("请求队列池", 请求队列池::构建单例());
        模拟处理器_=new 模拟处理器();
        请求拦截器模拟1_=new 请求拦截器模拟1("拦截1");
        请求拦截器模拟2_=new 请求拦截器模拟2("拦截2");
        请求拦截器列表.assign({请求拦截器模拟1_,请求拦截器模拟2_});
        请求处理器管理器* 请求处理器管理器_=请求处理器管理器::构建单例(请求拦截器列表);
        请求处理器管理器_->注册请求处理器("模拟处理器", 模拟处理器_);
        命名服务管理器::获取单例()->注册服务<请求处理器管理器 *>("请求处理器管理器", 请求处理器管理器_);
     }

    virtual void TearDown() {
        请求队列池::销毁单例();
        请求处理器管理器::销毁单例();
        delete 模拟处理器_;
        请求接收器::销毁单例();
        请求拦截器列表.clear();
        delete 请求拦截器模拟1_;
        delete 请求拦截器模拟2_;
        命名服务管理器::销毁单例();
    }
};


#endif //TRANSFER_请求总线测试环境2_H
