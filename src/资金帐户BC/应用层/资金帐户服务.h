#ifndef TRANSFER_资金帐户服务_H
#define TRANSFER_资金帐户服务_H

#include "../../框架组件/事件总线/事件发布订阅服务.h"
#include "../../框架组件/命名服务/命名服务管理器.h"
#include "资金帐户服务接口.h"
#include "资金帐户仓储接口.h"
#include "资金帐户查询接口.h"
#include "../主适配器/资金事件DTO.h"
class 资金帐户服务 : public 资金帐户服务接口{
private:
    资金帐户仓储接口 * 资金帐户仓储接口_;
    资金帐户查询接口 * 资金帐户查询服务接口_;
    资金帐户服务(资金帐户仓储接口 * 资金帐户仓储接口, 资金帐户查询接口* 资金帐户查询服务接口)
    : 资金帐户仓储接口_(资金帐户仓储接口),资金帐户查询服务接口_(资金帐户查询服务接口){}
    static 资金帐户服务* 资金帐户服务_;
public:
    virtual ~资金帐户服务() {
        资金帐户服务::资金帐户服务_= nullptr;
    }
    static 资金帐户服务* 构建单例(资金帐户仓储接口 * 资金帐户仓储接口, 资金帐户查询接口 * 资金帐户查询服务接口_){
        if (资金帐户服务::资金帐户服务_ == nullptr) {
            资金帐户服务::资金帐户服务_ = new 资金帐户服务(资金帐户仓储接口,资金帐户查询服务接口_);
        }
        return 资金帐户服务::资金帐户服务_;
    }
    static void 销毁单例(){
        if(资金帐户服务::资金帐户服务_!= nullptr)
           delete 资金帐户服务::资金帐户服务_;
    }
    static 资金帐户服务* 获取单例(){
        if(资金帐户服务::资金帐户服务_== nullptr){
            throw "单例未创建";
        }
        return 资金帐户服务::资金帐户服务_;
    }
    virtual void 初始化资金(std::string 账号, float 金额) override{
        资金帐户 资金帐户_ = 资金帐户仓储接口_->获取必须存在的资金帐户(账号);
        资金帐户_.增加金额(金额);
        资金帐户仓储接口_->更新资金帐户(资金帐户_);
    }
    virtual void 增加资金(int 单号,std::string 账号,float 金额) override{
        资金帐户 资金帐户_ = 资金帐户仓储接口_->获取必须存在的资金帐户(账号);
        if(资金帐户_.是否禁止转入()){
            事件发布订阅服务::构建单例()->发布(领域事件("增资已失败", 单号,
                                      异常((boost::format("收款方禁止收款:%s")%账号).str())));
            return;
        }
        资金帐户_.增加金额(金额);
        资金帐户仓储接口_->更新资金帐户(资金帐户_);
        事件发布订阅服务::构建单例()->发布(领域事件("增资已成功", 单号, 增资已成功DTO(单号, 账号, 金额)));
    }
    virtual void 扣减资金(int 单号, std::string 账号, float 金额) override{
        资金帐户 资金帐户_=资金帐户仓储接口_->获取必须存在的资金帐户(账号);
        if(资金帐户_.是否禁止转出()){
            事件发布订阅服务::构建单例()->发布(领域事件("扣减已失败", 单号,
                                      异常((boost::format("付款方禁止转账:%s")%账号).str())));
            return;
        }
        if(!资金帐户_.是否足额(金额)){
            事件发布订阅服务::构建单例()->发布(领域事件("扣减已失败", 单号,
                                      异常((boost::format("付款方金额不足，少于%f元")%金额).str())));
            return;
        }
        资金帐户_.扣减金额(金额);
        资金帐户仓储接口_->更新资金帐户(资金帐户_);
        事件发布订阅服务::构建单例()->发布(领域事件("扣减已成功", 单号, 单号));
    }
    virtual void  设置禁止收款(std::string 账号, bool 是否禁止) override{
        资金帐户 资金帐户_=资金帐户仓储接口_->获取必须存在的资金帐户(账号);
        资金帐户_.设置禁止转入(是否禁止);
        资金帐户仓储接口_->更新资金帐户(资金帐户_);
    }
    virtual void  设置禁止付款(std::string 账号, bool 是否禁止) override{
        资金帐户 资金帐户_=资金帐户仓储接口_->获取必须存在的资金帐户(账号);
        资金帐户_.设置禁止转出(是否禁止);
        资金帐户仓储接口_->更新资金帐户(资金帐户_);
    }
    virtual void 添加资金帐户(std::string 账号) override{
        资金帐户 资金帐户(账号);
        资金帐户仓储接口_->新增资金帐户(资金帐户);
    }
    virtual boost::optional<资金帐户> 获取资金帐户(std::string 账号) override{
        return 资金帐户查询服务接口_->获取资金帐户(账号);
    }
};
#endif //TRANSFER_资金帐户服务_H
